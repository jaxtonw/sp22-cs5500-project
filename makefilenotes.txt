# Makefile help by makefiletutorial.com and Job Vranish (https://spin.atomicobject.com/2016/08/26/makefile-c-projects/)
SHELL := /bin/bash

TARGET_EXEC := splarfs

BUILD_DIR := ./build
SRC_DIRS := ./src
TEST_SRC_DIRS := ./test
TEST_BUILD_DIRS := ./testbuild
TEST_RESULTS_DIRS := ./testresults

CC := mpicxx
CXX := mpicxx
RC := mpirun

# Find all the C and C++ files we want to compile
# Note the single quotes around the * expressions. Make will incorrectly expand these otherwise.
SRCS := $(shell find $(SRC_DIRS) -name '*.cpp' -or -name '*.c' -or -name '*.s')

# String substitution for every C/C++ file.
# As an example, hello.cpp turns into ./build/hello.cpp.o
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)

# String substitution (suffix version without %).
# As an example, ./build/hello.cpp.o turns into ./build/hello.cpp.d
DEPS := $(OBJS:.o=.d)

# Every folder in ./src will need to be passed to GCC so that it can find header files
INC_DIRS := $(shell find $(SRC_DIRS) -type d)
# Add a prefix to INC_DIRS. So moduleA would become -ImoduleA. GCC understands this -I flag
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

# The -MMD and -MP flags together generate Makefiles for us!
# These files will have .d instead of .o as the output.
CPPFLAGS := $(INC_FLAGS)

# # The final build step.
# $(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
# 	$(CC) $(OBJS) -o $@ $(LDFLAGS)

# Build step for C++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
	mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@


.PHONY: clean

clean:
	rm -r $(BUILD_DIR)

# dotest:
# 	@if [[ -z "${fldr}" ]]; then \
# 		echo "fldr must be set"; \
# 		exit 1; \
# 	fi

# 	mkdir -p $(TEST_BUILD_DIRS)
# 	mkdir -p $(TEST_RESULTS_DIRS)

# 	$(foreach file, \
# 		$(shell find $(TEST_SRC_DIRS)/${fldr} -name '*.cpp'), \
# 			$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(file) -o $(TEST_BUILD_DIRS)/$(notdir $(file)).o; \
# 			$(RC) -np 3 $(TEST_BUILD_DIRS)/$(notdir $(file)).o; )


# Include the .d makefiles. The - at the front suppresses the errors of missing
# Makefiles. Initially, all the .d files will be missing, and we don't want those
# errors to show up.
-include $(DEPS)